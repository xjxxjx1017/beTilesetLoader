package:application/vnd.bitty-archive;
data:text/lua;count=997;path=main.lua;
require 'beTilesetLoader'

local exampleRes = beTilesetLoader_readTileFamily( 'res', 'solidstonetiles' )
	
-- call this in update of main.lua 
setup = function()
end

update = function( delta )
    local exampleTiles = {
        {x = 5, y = 5, adjust8 = { nil, 'ground', nil, 'ground', nil, 'ground', nil, 'ground'} },
        {x = 4, y = 5, adjust8 = { nil, nil, nil, 'ground', nil, nil, nil, nil} },
        {x = 5, y = 4, adjust8 = { nil, nil, nil, nil, nil, 'ground', nil, nil} },
        {x = 5, y = 6, adjust8 = { nil, 'ground', nil, nil, nil, nil, nil, nil} },
        {x = 6, y = 5, adjust8 = { nil, nil, nil, nil, nil, nil, nil, 'ground'} }
    }
    for k,v in ipairs( exampleTiles ) do
        local id = beTilesetLoader_getTileId( exampleRes, 'ground', v.adjust8 )
        local wCount = 8
        local xx, yy = id % wCount * 32, math.floor( id / wCount ) * 32
        local sprX, sprY = v.x * 32, v.y * 32
        tex( exampleRes.tex, sprX, sprY, 32, 32, xx, yy, 32, 32 )
    end
end
data:image/png;base64;count=24636;path=res/solidstonetiles/solidstonetiles.png;

data:text/txt;count=1426;path=res/solidstonetiles/solidstonetiles.txt;
{
	"tile_size": 32,
	"blob_sets": [
		{
			"members": [
				{ "id":0, "role":56 },
				{ "id":1, "role":62 },
				{ "id":2, "role":14 },
				{ "id":3, "role":8 },
				{ "id":4, "role":248 },
				{ "id":5, "role":255 },
				{ "id":6, "role":143 },
				{ "id":7, "role":136 },
				{ "id":8, "role":224 },
				{ "id":9, "role":227 },
				{ "id":10, "role":131 },
				{ "id":11, "role":128 },
				{ "id":12, "role":32 },
				{ "id":13, "role":34 },
				{ "id":14, "role":2 },
				{ "id":15, "role":0 },
				{ "id":16, "role":40 },
				{ "id":17, "role":46 },
				{ "id":18, "role":58 },
				{ "id":19, "role":10 },
				{ "id":20, "role":42 },
				{ "id":21, "role":232 },
				{ "id":22, "role":239 },
				{ "id":23, "role":251 },
				{ "id":24, "role":139 },
				{ "id":25, "role":235 },
				{ "id":26, "role":184 },
				{ "id":27, "role":191 },
				{ "id":28, "role":254 },
				{ "id":29, "role":142 },
				{ "id":30, "role":190 },
				{ "id":31, "role":160 },
				{ "id":32, "role":163 },
				{ "id":33, "role":226 },
				{ "id":34, "role":130 },
				{ "id":35, "role":162 },
				{ "id":36, "role":168 },
				{ "id":37, "role":175 },
				{ "id":38, "role":250 },
				{ "id":39, "role":138 },
				{ "id":40, "role":170 },
				{ "id":41, "role":187 },
				{ "id":42, "role":238 },
				{ "id":43, "role":186 },
				{ "id":44, "role":174 },
				{ "id":45, "role":234 },
				{ "id":46, "role":171 }
			]
		}
	],
	"wang_sets": [

	]
}
data:text/lua;count=4732;path=beTilesetLoader.lua;
--[[
The MIT License

Copyright (C) 2021 Jackson Xie

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]

beTilesetLoader_readTileFamily = function( path, tile_family )
	local tex = Resources.load( path..'/'..tile_family..'/'..tile_family..'.png')
	local filepath = path..'/'..tile_family..'/'..tile_family..'.txt'
	local bytes = Project.main:read( filepath )
	local js = bytes:readString()
	print( 'loading...', '', js )
	if js == '' or js == nil then 
		print( file, '', 'res data not found, returning default' )
		return {} 
	end
	local json = Json.new()
	local o = json:toTable( json:fromString(js) )
	return {
		tex = tex,
		json = o
	}
end

local roleMap = {}
beTilesetLoader_getTileRole = function( tileFamily, adjust8Family )
	local rowChecks = {
		{ yes = {1,2,3,4,5,6,7,8}, no = {} },
		{ yes = {2,3,4,5,6,7,8}, no = {1} },
		{ yes = {1,2,4,5,6,7,8}, no = {3} },
		{ yes = {1,2,3,4,6,7,8}, no = {5} },
		{ yes = {1,2,3,4,5,6,8}, no = {7} },
		{ yes = {1,2,3,4,6,8}, no = {5,7} },
		{ yes = {2,3,4,6,7,8}, no = {1,5} },
		{ yes = {2,4,5,6,7,8}, no = {1,3} },
		{ yes = {1,2,4,5,6,8}, no = {3,7} },
		{ yes = {2,4,6,7,8}, no = {1,3,5} },
		{ yes = {2,4,5,6,8}, no = {1,3,7} },
		{ yes = {4,5,6,7,8}, no = {2} },
		{ yes = {6,7,8,1,2}, no = {4} },
		{ yes = {1,2,3,4,8}, no = {6} },
		{ yes = {2,3,4,5,6}, no = {8} },
		{ yes = {2,4,6}, no = {3,5,8} },
		{ yes = {2,6,8}, no = {1,4,7} },
		{ yes = {4,6,8}, no = {2,5,7} },
		{ yes = {2,4,8}, no = {1,3,6} },
		{ yes = {4,6,7,8}, no = {2,5} },
		{ yes = {4,5,6,8}, no = {2,7} },
		{ yes = {2,3,4,6}, no = {5,8} },
		{ yes = {2,4,5,6}, no = {3,8} },
		{ yes = {1,2,6,8}, no = {4,7} },
		{ yes = {2,6,7,8}, no = {1,4} },
		{ yes = {2,3,4,8}, no = {1,6} },
		{ yes = {1,2,4,8}, no = {3,6} },
		{ yes = {4,5,6}, no = {2,8} },
		{ yes = {6,7,8}, no = {2,4} },
		{ yes = {1,2,8}, no = {4,6} },
		{ yes = {2,3,4}, no = {6,8} },
		{ yes = {4,6}, no = {2,5,8} },
		{ yes = {6,8}, no = {2,4,7} },
		{ yes = {2,8}, no = {4,6,1} },
		{ yes = {2,4}, no = {3,6,8} },
		{ yes = {2,4,6,8}, no = {} },
		{ yes = {}, no = {2,4,6,8} },
		{ yes = {2}, no = {4,6,8} },
		{ yes = {4}, no = {2,6,8} },
		{ yes = {6}, no = {2,4,8} },
		{ yes = {8}, no = {2,4,6} },
		{ yes = {4,8}, no = {2,6} },
		{ yes = {2,6}, no = {4,8} },
		{ yes = {2}, no = {4,6,8} },
		{ yes = {4}, no = {2,6,8} },
		{ yes = {6}, no = {2,4,8} },
		{ yes = {8}, no = {2,4,6} },
	}
	local role = 0
	local list = {}
	for ii = 1,8 do
		if adjust8Family[ii] == tileFamily then 
			-- this might be slow
			role = role + 2 ^ ( ii - 1 ) 
		end
	end
	if roleMap[role] == nil then
		for k,v in ipairs( rowChecks ) do
			local match = true
			for k1,v1 in ipairs( v.no ) do
				if adjust8Family[v1] == tileFamily then
					match = false
				end
			end
			for k1,v1 in ipairs( v.yes ) do
				if adjust8Family[v1] ~= tileFamily then
					match = false
				end
			end
			-- if all matched, then cache and return the role
			if match then
				v.role = 0
				for k1,v1 in ipairs( v.yes ) do
					v.role = v.role + 2 ^ ( v1 - 1 )
				end 
				roleMap[role] = v.role
				if v.role == 170 then
				a = 0
				end
				return roleMap[role]
			end
		end
		-- if all match failed, then keep the role
		roleMap[role] = role
	end
	return roleMap[role]
end 

local filter = function(lst, pred)
	if not lst then
		return nil
	end
	local result = { }
	for _, v in ipairs(lst) do
		if pred and pred(v) then
			table.insert(result, v)
		elseif not pred and not v then
			return { }
		end
	end

	return result
end

beTilesetLoader_getTileId = function( source, tileFamily, adjust8Family )
	local role = beTilesetLoader_getTileRole( tileFamily, adjust8Family )
    local cfg = filter( source.json.blob_sets[1].members, function(a) return a.role == role end )
    return cfg[1].id
end
data:text/json;count=119;path=info.json;
{
  "id": 0,
  "title": "Noname",
  "description": "",
  "author": "",
  "version": "1.0",
  "genre": "",
  "url": ""
}
